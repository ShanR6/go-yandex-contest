// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TestLog TestLog
//
// swagger:model TestLog
type TestLog struct {

	// answer
	// Required: true
	Answer *string `json:"answer"`

	// checker error
	// Required: true
	CheckerError *string `json:"checkerError"`

	// error
	// Required: true
	Error *string `json:"error"`

	// input
	// Required: true
	Input *string `json:"input"`

	// is sample
	// Required: true
	IsSample *bool `json:"isSample"`

	// memory used
	// Required: true
	MemoryUsed *int64 `json:"memoryUsed"`

	// message
	// Required: true
	Message *string `json:"message"`

	// output
	// Required: true
	Output *string `json:"output"`

	// running time
	// Required: true
	RunningTime *int64 `json:"runningTime"`

	// sequence number
	// Required: true
	SequenceNumber *int32 `json:"sequenceNumber"`

	// test name
	// Required: true
	TestName *string `json:"testName"`

	// testset idx
	// Required: true
	TestsetIdx *int32 `json:"testsetIdx"`

	// verdict
	// Required: true
	Verdict *string `json:"verdict"`
}

// Validate validates this test log
func (m *TestLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnswer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckerError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsSample(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestsetIdx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestLog) validateAnswer(formats strfmt.Registry) error {

	if err := validate.Required("answer", "body", m.Answer); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateCheckerError(formats strfmt.Registry) error {

	if err := validate.Required("checkerError", "body", m.CheckerError); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateInput(formats strfmt.Registry) error {

	if err := validate.Required("input", "body", m.Input); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateIsSample(formats strfmt.Registry) error {

	if err := validate.Required("isSample", "body", m.IsSample); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateMemoryUsed(formats strfmt.Registry) error {

	if err := validate.Required("memoryUsed", "body", m.MemoryUsed); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateOutput(formats strfmt.Registry) error {

	if err := validate.Required("output", "body", m.Output); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateRunningTime(formats strfmt.Registry) error {

	if err := validate.Required("runningTime", "body", m.RunningTime); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("sequenceNumber", "body", m.SequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateTestName(formats strfmt.Registry) error {

	if err := validate.Required("testName", "body", m.TestName); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateTestsetIdx(formats strfmt.Registry) error {

	if err := validate.Required("testsetIdx", "body", m.TestsetIdx); err != nil {
		return err
	}

	return nil
}

func (m *TestLog) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this test log based on context it is used
func (m *TestLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TestLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestLog) UnmarshalBinary(b []byte) error {
	var res TestLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
