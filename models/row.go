// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Row Row
//
// swagger:model Row
type Row struct {

	// participant info
	ParticipantInfo *Participant `json:"participantInfo,omitempty"`

	// place from
	PlaceFrom int32 `json:"placeFrom,omitempty"`

	// place to
	PlaceTo int32 `json:"placeTo,omitempty"`

	// problem results
	ProblemResults []*ProblemResult `json:"problemResults"`

	// score
	Score string `json:"score,omitempty"`
}

// Validate validates this row
func (m *Row) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParticipantInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Row) validateParticipantInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ParticipantInfo) { // not required
		return nil
	}

	if m.ParticipantInfo != nil {
		if err := m.ParticipantInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("participantInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Row) validateProblemResults(formats strfmt.Registry) error {
	if swag.IsZero(m.ProblemResults) { // not required
		return nil
	}

	for i := 0; i < len(m.ProblemResults); i++ {
		if swag.IsZero(m.ProblemResults[i]) { // not required
			continue
		}

		if m.ProblemResults[i] != nil {
			if err := m.ProblemResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("problemResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this row based on the context it is used
func (m *Row) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParticipantInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProblemResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Row) contextValidateParticipantInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ParticipantInfo != nil {
		if err := m.ParticipantInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("participantInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Row) contextValidateProblemResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProblemResults); i++ {

		if m.ProblemResults[i] != nil {
			if err := m.ProblemResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("problemResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Row) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Row) UnmarshalBinary(b []byte) error {
	var res Row
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
