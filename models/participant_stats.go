// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParticipantStats ParticipantStats
//
// swagger:model ParticipantStats
type ParticipantStats struct {

	// contest Id
	// Required: true
	ContestID *int64 `json:"contestId"`

	// first submission time
	FirstSubmissionTime string `json:"firstSubmissionTime,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// login
	// Required: true
	Login *string `json:"login"`

	// name
	// Required: true
	Name *string `json:"name"`

	// runs
	// Required: true
	Runs []*FullRunReport `json:"runs"`

	// started at
	StartedAt string `json:"startedAt,omitempty"`
}

// Validate validates this participant stats
func (m *ParticipantStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParticipantStats) validateContestID(formats strfmt.Registry) error {

	if err := validate.Required("contestId", "body", m.ContestID); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantStats) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantStats) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantStats) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ParticipantStats) validateRuns(formats strfmt.Registry) error {

	if err := validate.Required("runs", "body", m.Runs); err != nil {
		return err
	}

	for i := 0; i < len(m.Runs); i++ {
		if swag.IsZero(m.Runs[i]) { // not required
			continue
		}

		if m.Runs[i] != nil {
			if err := m.Runs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this participant stats based on the context it is used
func (m *ParticipantStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParticipantStats) contextValidateRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Runs); i++ {

		if m.Runs[i] != nil {
			if err := m.Runs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParticipantStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParticipantStats) UnmarshalBinary(b []byte) error {
	var res ParticipantStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
