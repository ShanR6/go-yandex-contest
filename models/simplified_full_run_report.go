// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimplifiedFullRunReport SimplifiedFullRunReport
//
// swagger:model SimplifiedFullRunReport
type SimplifiedFullRunReport struct {

	// compile log
	// Required: true
	CompileLog *string `json:"compileLog"`

	// compiler
	// Required: true
	Compiler *string `json:"compiler"`

	// contest Id
	// Required: true
	ContestID *int64 `json:"contestId"`

	// contest name
	// Required: true
	ContestName *string `json:"contestName"`

	// final score
	// Required: true
	FinalScore *string `json:"finalScore"`

	// ip
	IP string `json:"ip,omitempty"`

	// max memory usage
	// Required: true
	MaxMemoryUsage *int64 `json:"maxMemoryUsage"`

	// max time usage
	// Required: true
	MaxTimeUsage *int64 `json:"maxTimeUsage"`

	// participant
	// Required: true
	Participant *Participant `json:"participant"`

	// postprocessor message
	PostprocessorMessage string `json:"postprocessorMessage,omitempty"`

	// precompile checks
	// Required: true
	PrecompileChecks []*AdditionalSolutionCheckResult `json:"precompileChecks"`

	// preliminary score
	// Required: true
	PreliminaryScore *string `json:"preliminaryScore"`

	// problem alias
	// Required: true
	ProblemAlias *string `json:"problemAlias"`

	// problem Id
	// Required: true
	ProblemID *string `json:"problemId"`

	// run Id
	// Required: true
	RunID *int64 `json:"runId"`

	// status
	// Enum: [WAITING FAILED RUNNING FINISHED]
	Status string `json:"status,omitempty"`

	// submission time
	// Required: true
	SubmissionTime *string `json:"submissionTime"`

	// test file type
	// Required: true
	// Enum: [BINARY TEXT]
	TestFileType *string `json:"testFileType"`

	// tests
	// Required: true
	Tests []*TestLog `json:"tests"`

	// time from start
	// Required: true
	TimeFromStart *int64 `json:"timeFromStart"`

	// verdict
	// Required: true
	Verdict *string `json:"verdict"`
}

// Validate validates this simplified full run report
func (m *SimplifiedFullRunReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompileLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompiler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContestName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxMemoryUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxTimeUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecompileChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreliminaryScore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestFileType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTests(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeFromStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimplifiedFullRunReport) validateCompileLog(formats strfmt.Registry) error {

	if err := validate.Required("compileLog", "body", m.CompileLog); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateCompiler(formats strfmt.Registry) error {

	if err := validate.Required("compiler", "body", m.Compiler); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateContestID(formats strfmt.Registry) error {

	if err := validate.Required("contestId", "body", m.ContestID); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateContestName(formats strfmt.Registry) error {

	if err := validate.Required("contestName", "body", m.ContestName); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateFinalScore(formats strfmt.Registry) error {

	if err := validate.Required("finalScore", "body", m.FinalScore); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateMaxMemoryUsage(formats strfmt.Registry) error {

	if err := validate.Required("maxMemoryUsage", "body", m.MaxMemoryUsage); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateMaxTimeUsage(formats strfmt.Registry) error {

	if err := validate.Required("maxTimeUsage", "body", m.MaxTimeUsage); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateParticipant(formats strfmt.Registry) error {

	if err := validate.Required("participant", "body", m.Participant); err != nil {
		return err
	}

	if m.Participant != nil {
		if err := m.Participant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("participant")
			}
			return err
		}
	}

	return nil
}

func (m *SimplifiedFullRunReport) validatePrecompileChecks(formats strfmt.Registry) error {

	if err := validate.Required("precompileChecks", "body", m.PrecompileChecks); err != nil {
		return err
	}

	for i := 0; i < len(m.PrecompileChecks); i++ {
		if swag.IsZero(m.PrecompileChecks[i]) { // not required
			continue
		}

		if m.PrecompileChecks[i] != nil {
			if err := m.PrecompileChecks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("precompileChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimplifiedFullRunReport) validatePreliminaryScore(formats strfmt.Registry) error {

	if err := validate.Required("preliminaryScore", "body", m.PreliminaryScore); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateProblemAlias(formats strfmt.Registry) error {

	if err := validate.Required("problemAlias", "body", m.ProblemAlias); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateProblemID(formats strfmt.Registry) error {

	if err := validate.Required("problemId", "body", m.ProblemID); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateRunID(formats strfmt.Registry) error {

	if err := validate.Required("runId", "body", m.RunID); err != nil {
		return err
	}

	return nil
}

var simplifiedFullRunReportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WAITING","FAILED","RUNNING","FINISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simplifiedFullRunReportTypeStatusPropEnum = append(simplifiedFullRunReportTypeStatusPropEnum, v)
	}
}

const (

	// SimplifiedFullRunReportStatusWAITING captures enum value "WAITING"
	SimplifiedFullRunReportStatusWAITING string = "WAITING"

	// SimplifiedFullRunReportStatusFAILED captures enum value "FAILED"
	SimplifiedFullRunReportStatusFAILED string = "FAILED"

	// SimplifiedFullRunReportStatusRUNNING captures enum value "RUNNING"
	SimplifiedFullRunReportStatusRUNNING string = "RUNNING"

	// SimplifiedFullRunReportStatusFINISHED captures enum value "FINISHED"
	SimplifiedFullRunReportStatusFINISHED string = "FINISHED"
)

// prop value enum
func (m *SimplifiedFullRunReport) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, simplifiedFullRunReportTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SimplifiedFullRunReport) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateSubmissionTime(formats strfmt.Registry) error {

	if err := validate.Required("submissionTime", "body", m.SubmissionTime); err != nil {
		return err
	}

	return nil
}

var simplifiedFullRunReportTypeTestFileTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BINARY","TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simplifiedFullRunReportTypeTestFileTypePropEnum = append(simplifiedFullRunReportTypeTestFileTypePropEnum, v)
	}
}

const (

	// SimplifiedFullRunReportTestFileTypeBINARY captures enum value "BINARY"
	SimplifiedFullRunReportTestFileTypeBINARY string = "BINARY"

	// SimplifiedFullRunReportTestFileTypeTEXT captures enum value "TEXT"
	SimplifiedFullRunReportTestFileTypeTEXT string = "TEXT"
)

// prop value enum
func (m *SimplifiedFullRunReport) validateTestFileTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, simplifiedFullRunReportTypeTestFileTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SimplifiedFullRunReport) validateTestFileType(formats strfmt.Registry) error {

	if err := validate.Required("testFileType", "body", m.TestFileType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTestFileTypeEnum("testFileType", "body", *m.TestFileType); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateTests(formats strfmt.Registry) error {

	if err := validate.Required("tests", "body", m.Tests); err != nil {
		return err
	}

	for i := 0; i < len(m.Tests); i++ {
		if swag.IsZero(m.Tests[i]) { // not required
			continue
		}

		if m.Tests[i] != nil {
			if err := m.Tests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimplifiedFullRunReport) validateTimeFromStart(formats strfmt.Registry) error {

	if err := validate.Required("timeFromStart", "body", m.TimeFromStart); err != nil {
		return err
	}

	return nil
}

func (m *SimplifiedFullRunReport) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this simplified full run report based on the context it is used
func (m *SimplifiedFullRunReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParticipant(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrecompileChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SimplifiedFullRunReport) contextValidateParticipant(ctx context.Context, formats strfmt.Registry) error {

	if m.Participant != nil {
		if err := m.Participant.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("participant")
			}
			return err
		}
	}

	return nil
}

func (m *SimplifiedFullRunReport) contextValidatePrecompileChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrecompileChecks); i++ {

		if m.PrecompileChecks[i] != nil {
			if err := m.PrecompileChecks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("precompileChecks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SimplifiedFullRunReport) contextValidateTests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tests); i++ {

		if m.Tests[i] != nil {
			if err := m.Tests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SimplifiedFullRunReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimplifiedFullRunReport) UnmarshalBinary(b []byte) error {
	var res SimplifiedFullRunReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
