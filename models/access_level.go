// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessLevel AccessLevel
//
// swagger:model AccessLevel
type AccessLevel struct {

	// checker settings modification allowed
	// Required: true
	CheckerSettingsModificationAllowed *bool `json:"checkerSettingsModificationAllowed"`

	// contest limit
	ContestLimit int32 `json:"contestLimit,omitempty"`

	// file size upload limit
	FileSizeUploadLimit int64 `json:"fileSizeUploadLimit,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is group creation allowed
	// Required: true
	IsGroupCreationAllowed *bool `json:"isGroupCreationAllowed"`

	// is problemset modification allowed
	// Required: true
	IsProblemsetModificationAllowed *bool `json:"isProblemsetModificationAllowed"`

	// name
	// Required: true
	Name *string `json:"name"`

	// participant limit
	ParticipantLimit int32 `json:"participantLimit,omitempty"`

	// problem limit
	ProblemLimit int32 `json:"problemLimit,omitempty"`

	// problemset limit
	ProblemsetLimit int32 `json:"problemsetLimit,omitempty"`

	// testset template modification allowed
	// Required: true
	TestsetTemplateModificationAllowed *bool `json:"testsetTemplateModificationAllowed"`

	// total size upload limit
	TotalSizeUploadLimit int64 `json:"totalSizeUploadLimit,omitempty"`
}

// Validate validates this access level
func (m *AccessLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckerSettingsModificationAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsGroupCreationAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsProblemsetModificationAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestsetTemplateModificationAllowed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessLevel) validateCheckerSettingsModificationAllowed(formats strfmt.Registry) error {

	if err := validate.Required("checkerSettingsModificationAllowed", "body", m.CheckerSettingsModificationAllowed); err != nil {
		return err
	}

	return nil
}

func (m *AccessLevel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *AccessLevel) validateIsGroupCreationAllowed(formats strfmt.Registry) error {

	if err := validate.Required("isGroupCreationAllowed", "body", m.IsGroupCreationAllowed); err != nil {
		return err
	}

	return nil
}

func (m *AccessLevel) validateIsProblemsetModificationAllowed(formats strfmt.Registry) error {

	if err := validate.Required("isProblemsetModificationAllowed", "body", m.IsProblemsetModificationAllowed); err != nil {
		return err
	}

	return nil
}

func (m *AccessLevel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AccessLevel) validateTestsetTemplateModificationAllowed(formats strfmt.Registry) error {

	if err := validate.Required("testsetTemplateModificationAllowed", "body", m.TestsetTemplateModificationAllowed); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this access level based on context it is used
func (m *AccessLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessLevel) UnmarshalBinary(b []byte) error {
	var res AccessLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
