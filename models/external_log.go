// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExternalLog ExternalLog
//
// swagger:model ExternalLog
type ExternalLog struct {

	// contest log
	ContestLog *ContestLog `json:"contestLog,omitempty"`

	// contest log key
	ContestLogKey []string `json:"contestLogKey"`

	// download start time
	// Format: date-time
	DownloadStartTime strfmt.DateTime `json:"downloadStartTime,omitempty"`

	// dynamic
	Dynamic bool `json:"dynamic,omitempty"`

	// dynamic Url
	DynamicURL string `json:"dynamicUrl,omitempty"`

	// events count
	EventsCount int32 `json:"eventsCount,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// import as internal
	ImportAsInternal bool `json:"importAsInternal,omitempty"`

	// last update
	// Format: date-time
	LastUpdate strfmt.DateTime `json:"lastUpdate,omitempty"`

	// last update attempt
	// Format: date-time
	LastUpdateAttempt strfmt.DateTime `json:"lastUpdateAttempt,omitempty"`

	// last update error
	LastUpdateError []string `json:"lastUpdateError"`

	// owner Id
	OwnerID []int64 `json:"ownerId"`

	// raw Xml log
	// Format: byte
	RawXMLLog strfmt.Base64 `json:"rawXmlLog,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// xml log key
	XMLLogKey []string `json:"xmlLogKey"`
}

// Validate validates this external log
func (m *ExternalLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContestLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDownloadStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateAttempt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalLog) validateContestLog(formats strfmt.Registry) error {
	if swag.IsZero(m.ContestLog) { // not required
		return nil
	}

	if m.ContestLog != nil {
		if err := m.ContestLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contestLog")
			}
			return err
		}
	}

	return nil
}

func (m *ExternalLog) validateDownloadStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DownloadStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("downloadStartTime", "body", "date-time", m.DownloadStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalLog) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ExternalLog) validateLastUpdate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdate) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdate", "body", "date-time", m.LastUpdate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExternalLog) validateLastUpdateAttempt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdateAttempt) { // not required
		return nil
	}

	if err := validate.FormatOf("lastUpdateAttempt", "body", "date-time", m.LastUpdateAttempt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this external log based on the context it is used
func (m *ExternalLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContestLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExternalLog) contextValidateContestLog(ctx context.Context, formats strfmt.Registry) error {

	if m.ContestLog != nil {
		if err := m.ContestLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contestLog")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExternalLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExternalLog) UnmarshalBinary(b []byte) error {
	var res ExternalLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
