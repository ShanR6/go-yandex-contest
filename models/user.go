// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User User
//
// swagger:model User
type User struct {

	// access level
	AccessLevel *AccessLevel `json:"accessLevel,omitempty"`

	// creation time
	CreationTime []int64 `json:"creationTime"`

	// creator
	Creator *User `json:"creator,omitempty"`

	// creator Id
	CreatorID []int64 `json:"creatorId"`

	// displayed name
	DisplayedName string `json:"displayedName,omitempty"`

	// guest
	Guest bool `json:"guest,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// login
	Login string `json:"login,omitempty"`

	// password hash
	PasswordHash string `json:"passwordHash,omitempty"`

	// salt
	Salt string `json:"salt,omitempty"`

	// students group
	StudentsGroup *UserGroup `json:"studentsGroup,omitempty"`

	// students invites group
	StudentsInvitesGroup *UserGroup `json:"studentsInvitesGroup,omitempty"`

	// uid
	UID string `json:"uid,omitempty"`

	// uid as long
	UIDAsLong int64 `json:"uidAsLong,omitempty"`

	// user type
	// Enum: [PASSPORT GUEST SHAD INTERN OPENCUP LTI INTERNAL]
	UserType string `json:"userType,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudentsGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudentsInvitesGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessLevel) { // not required
		return nil
	}

	if m.AccessLevel != nil {
		if err := m.AccessLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessLevel")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateCreator(formats strfmt.Registry) error {
	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *User) validateStudentsGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.StudentsGroup) { // not required
		return nil
	}

	if m.StudentsGroup != nil {
		if err := m.StudentsGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("studentsGroup")
			}
			return err
		}
	}

	return nil
}

func (m *User) validateStudentsInvitesGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.StudentsInvitesGroup) { // not required
		return nil
	}

	if m.StudentsInvitesGroup != nil {
		if err := m.StudentsInvitesGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("studentsInvitesGroup")
			}
			return err
		}
	}

	return nil
}

var userTypeUserTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PASSPORT","GUEST","SHAD","INTERN","OPENCUP","LTI","INTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userTypeUserTypePropEnum = append(userTypeUserTypePropEnum, v)
	}
}

const (

	// UserUserTypePASSPORT captures enum value "PASSPORT"
	UserUserTypePASSPORT string = "PASSPORT"

	// UserUserTypeGUEST captures enum value "GUEST"
	UserUserTypeGUEST string = "GUEST"

	// UserUserTypeSHAD captures enum value "SHAD"
	UserUserTypeSHAD string = "SHAD"

	// UserUserTypeINTERN captures enum value "INTERN"
	UserUserTypeINTERN string = "INTERN"

	// UserUserTypeOPENCUP captures enum value "OPENCUP"
	UserUserTypeOPENCUP string = "OPENCUP"

	// UserUserTypeLTI captures enum value "LTI"
	UserUserTypeLTI string = "LTI"

	// UserUserTypeINTERNAL captures enum value "INTERNAL"
	UserUserTypeINTERNAL string = "INTERNAL"
)

// prop value enum
func (m *User) validateUserTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userTypeUserTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *User) validateUserType(formats strfmt.Registry) error {
	if swag.IsZero(m.UserType) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserTypeEnum("userType", "body", m.UserType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user based on the context it is used
func (m *User) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStudentsGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStudentsInvitesGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) contextValidateAccessLevel(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessLevel != nil {
		if err := m.AccessLevel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessLevel")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if m.Creator != nil {
		if err := m.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateStudentsGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.StudentsGroup != nil {
		if err := m.StudentsGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("studentsGroup")
			}
			return err
		}
	}

	return nil
}

func (m *User) contextValidateStudentsInvitesGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.StudentsInvitesGroup != nil {
		if err := m.StudentsInvitesGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("studentsInvitesGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
