// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KTypeProjection KTypeProjection
//
// swagger:model KTypeProjection
type KTypeProjection struct {

	// type
	Type *KType `json:"type,omitempty"`

	// variance
	// Enum: [INVARIANT IN OUT]
	Variance string `json:"variance,omitempty"`
}

// Validate validates this k type projection
func (m *KTypeProjection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KTypeProjection) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

var kTypeProjectionTypeVariancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVARIANT","IN","OUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kTypeProjectionTypeVariancePropEnum = append(kTypeProjectionTypeVariancePropEnum, v)
	}
}

const (

	// KTypeProjectionVarianceINVARIANT captures enum value "INVARIANT"
	KTypeProjectionVarianceINVARIANT string = "INVARIANT"

	// KTypeProjectionVarianceIN captures enum value "IN"
	KTypeProjectionVarianceIN string = "IN"

	// KTypeProjectionVarianceOUT captures enum value "OUT"
	KTypeProjectionVarianceOUT string = "OUT"
)

// prop value enum
func (m *KTypeProjection) validateVarianceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kTypeProjectionTypeVariancePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KTypeProjection) validateVariance(formats strfmt.Registry) error {
	if swag.IsZero(m.Variance) { // not required
		return nil
	}

	// value enum
	if err := m.validateVarianceEnum("variance", "body", m.Variance); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this k type projection based on the context it is used
func (m *KTypeProjection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KTypeProjection) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KTypeProjection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KTypeProjection) UnmarshalBinary(b []byte) error {
	var res KTypeProjection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
