// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContestSettings ContestSettings
//
// swagger:model ContestSettings
type ContestSettings struct {

	// contest name
	ContestName string `json:"contestName,omitempty"`

	// contest type
	// Enum: [SIMPLE TCM]
	ContestType string `json:"contestType,omitempty"`

	// duration
	Duration string `json:"duration,omitempty"`

	// languages
	Languages []Language `json:"languages"`
}

// Validate validates this contest settings
func (m *ContestSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contestSettingsTypeContestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SIMPLE","TCM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contestSettingsTypeContestTypePropEnum = append(contestSettingsTypeContestTypePropEnum, v)
	}
}

const (

	// ContestSettingsContestTypeSIMPLE captures enum value "SIMPLE"
	ContestSettingsContestTypeSIMPLE string = "SIMPLE"

	// ContestSettingsContestTypeTCM captures enum value "TCM"
	ContestSettingsContestTypeTCM string = "TCM"
)

// prop value enum
func (m *ContestSettings) validateContestTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contestSettingsTypeContestTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContestSettings) validateContestType(formats strfmt.Registry) error {
	if swag.IsZero(m.ContestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContestTypeEnum("contestType", "body", m.ContestType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contest settings based on context it is used
func (m *ContestSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContestSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContestSettings) UnmarshalBinary(b []byte) error {
	var res ContestSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
