// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KFunctionRole KFunction«Role»
//
// swagger:model KFunction«Role»
type KFunctionRole struct {

	// abstract
	// Required: true
	Abstract *bool `json:"abstract"`

	// annotations
	// Required: true
	Annotations []Annotation `json:"annotations"`

	// external
	// Required: true
	External *bool `json:"external"`

	// final
	// Required: true
	Final *bool `json:"final"`

	// infix
	// Required: true
	Infix *bool `json:"infix"`

	// inline
	// Required: true
	Inline *bool `json:"inline"`

	// name
	// Required: true
	Name *string `json:"name"`

	// open
	// Required: true
	Open *bool `json:"open"`

	// operator
	// Required: true
	Operator *bool `json:"operator"`

	// parameters
	// Required: true
	Parameters []*KParameter `json:"parameters"`

	// return type
	// Required: true
	ReturnType *KType `json:"returnType"`

	// suspend
	// Required: true
	Suspend *bool `json:"suspend"`

	// type parameters
	// Required: true
	TypeParameters []*KTypeParameter `json:"typeParameters"`

	// visibility
	// Enum: [PUBLIC PROTECTED INTERNAL PRIVATE]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this k function role
func (m *KFunctionRole) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbstract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuspend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KFunctionRole) validateAbstract(formats strfmt.Registry) error {

	if err := validate.Required("abstract", "body", m.Abstract); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateAnnotations(formats strfmt.Registry) error {

	if err := validate.Required("annotations", "body", m.Annotations); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateExternal(formats strfmt.Registry) error {

	if err := validate.Required("external", "body", m.External); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateFinal(formats strfmt.Registry) error {

	if err := validate.Required("final", "body", m.Final); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateInfix(formats strfmt.Registry) error {

	if err := validate.Required("infix", "body", m.Infix); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateInline(formats strfmt.Registry) error {

	if err := validate.Required("inline", "body", m.Inline); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("open", "body", m.Open); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateParameters(formats strfmt.Registry) error {

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KFunctionRole) validateReturnType(formats strfmt.Registry) error {

	if err := validate.Required("returnType", "body", m.ReturnType); err != nil {
		return err
	}

	if m.ReturnType != nil {
		if err := m.ReturnType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnType")
			}
			return err
		}
	}

	return nil
}

func (m *KFunctionRole) validateSuspend(formats strfmt.Registry) error {

	if err := validate.Required("suspend", "body", m.Suspend); err != nil {
		return err
	}

	return nil
}

func (m *KFunctionRole) validateTypeParameters(formats strfmt.Registry) error {

	if err := validate.Required("typeParameters", "body", m.TypeParameters); err != nil {
		return err
	}

	for i := 0; i < len(m.TypeParameters); i++ {
		if swag.IsZero(m.TypeParameters[i]) { // not required
			continue
		}

		if m.TypeParameters[i] != nil {
			if err := m.TypeParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var kFunctionRoleTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PROTECTED","INTERNAL","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kFunctionRoleTypeVisibilityPropEnum = append(kFunctionRoleTypeVisibilityPropEnum, v)
	}
}

const (

	// KFunctionRoleVisibilityPUBLIC captures enum value "PUBLIC"
	KFunctionRoleVisibilityPUBLIC string = "PUBLIC"

	// KFunctionRoleVisibilityPROTECTED captures enum value "PROTECTED"
	KFunctionRoleVisibilityPROTECTED string = "PROTECTED"

	// KFunctionRoleVisibilityINTERNAL captures enum value "INTERNAL"
	KFunctionRoleVisibilityINTERNAL string = "INTERNAL"

	// KFunctionRoleVisibilityPRIVATE captures enum value "PRIVATE"
	KFunctionRoleVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *KFunctionRole) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kFunctionRoleTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KFunctionRole) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this k function role based on the context it is used
func (m *KFunctionRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KFunctionRole) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KFunctionRole) contextValidateReturnType(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnType != nil {
		if err := m.ReturnType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnType")
			}
			return err
		}
	}

	return nil
}

func (m *KFunctionRole) contextValidateTypeParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeParameters); i++ {

		if m.TypeParameters[i] != nil {
			if err := m.TypeParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KFunctionRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KFunctionRole) UnmarshalBinary(b []byte) error {
	var res KFunctionRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
