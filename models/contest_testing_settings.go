// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContestTestingSettings ContestTestingSettings
//
// swagger:model ContestTestingSettings
type ContestTestingSettings struct {

	// contest
	Contest *Contest `json:"contest,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// precompile checkers
	PrecompileCheckers []*AdditionalSolutionCheck `json:"precompileCheckers"`
}

// Validate validates this contest testing settings
func (m *ContestTestingSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrecompileCheckers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContestTestingSettings) validateContest(formats strfmt.Registry) error {
	if swag.IsZero(m.Contest) { // not required
		return nil
	}

	if m.Contest != nil {
		if err := m.Contest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contest")
			}
			return err
		}
	}

	return nil
}

func (m *ContestTestingSettings) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ContestTestingSettings) validatePrecompileCheckers(formats strfmt.Registry) error {
	if swag.IsZero(m.PrecompileCheckers) { // not required
		return nil
	}

	for i := 0; i < len(m.PrecompileCheckers); i++ {
		if swag.IsZero(m.PrecompileCheckers[i]) { // not required
			continue
		}

		if m.PrecompileCheckers[i] != nil {
			if err := m.PrecompileCheckers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("precompileCheckers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contest testing settings based on the context it is used
func (m *ContestTestingSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrecompileCheckers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContestTestingSettings) contextValidateContest(ctx context.Context, formats strfmt.Registry) error {

	if m.Contest != nil {
		if err := m.Contest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contest")
			}
			return err
		}
	}

	return nil
}

func (m *ContestTestingSettings) contextValidatePrecompileCheckers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrecompileCheckers); i++ {

		if m.PrecompileCheckers[i] != nil {
			if err := m.PrecompileCheckers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("precompileCheckers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContestTestingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContestTestingSettings) UnmarshalBinary(b []byte) error {
	var res ContestTestingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
