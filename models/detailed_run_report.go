// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedRunReport DetailedRunReport
//
// swagger:model DetailedRunReport
type DetailedRunReport struct {

	// compile log
	// Required: true
	CompileLog *string `json:"compileLog"`

	// compiler
	// Required: true
	Compiler *string `json:"compiler"`

	// diff
	// Required: true
	Diff *string `json:"diff"`

	// problem alias
	// Required: true
	ProblemAlias *string `json:"problemAlias"`

	// problem Id
	// Required: true
	ProblemID *string `json:"problemId"`

	// source
	// Required: true
	Source *string `json:"source"`

	// submission time
	// Required: true
	SubmissionTime *string `json:"submissionTime"`

	// verdict
	// Required: true
	Verdict *string `json:"verdict"`
}

// Validate validates this detailed run report
func (m *DetailedRunReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompileLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompiler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedRunReport) validateCompileLog(formats strfmt.Registry) error {

	if err := validate.Required("compileLog", "body", m.CompileLog); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateCompiler(formats strfmt.Registry) error {

	if err := validate.Required("compiler", "body", m.Compiler); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateDiff(formats strfmt.Registry) error {

	if err := validate.Required("diff", "body", m.Diff); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateProblemAlias(formats strfmt.Registry) error {

	if err := validate.Required("problemAlias", "body", m.ProblemAlias); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateProblemID(formats strfmt.Registry) error {

	if err := validate.Required("problemId", "body", m.ProblemID); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateSubmissionTime(formats strfmt.Registry) error {

	if err := validate.Required("submissionTime", "body", m.SubmissionTime); err != nil {
		return err
	}

	return nil
}

func (m *DetailedRunReport) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this detailed run report based on context it is used
func (m *DetailedRunReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DetailedRunReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedRunReport) UnmarshalBinary(b []byte) error {
	var res DetailedRunReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
