// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Participant Participant
//
// swagger:model Participant
type Participant struct {

	// contest
	Contest *Contest `json:"contest,omitempty"`

	// contest started
	ContestStarted bool `json:"contestStarted,omitempty"`

	// creation time
	CreationTime []int64 `json:"creationTime"`

	// deleted
	// Required: true
	Deleted *bool `json:"deleted"`

	// displayed name
	DisplayedName string `json:"displayedName,omitempty"`

	// displayed name checked
	DisplayedNameChecked string `json:"displayedNameChecked,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// login
	Login string `json:"login,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// name auto generated
	NameAutoGenerated bool `json:"nameAutoGenerated,omitempty"`

	// not deleted
	// Required: true
	NotDeleted *bool `json:"notDeleted"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// team
	Team *Team `json:"team,omitempty"`

	// team participation
	TeamParticipation bool `json:"teamParticipation,omitempty"`

	// teammates
	Teammates []*User `json:"teammates"`

	// user
	User *User `json:"user,omitempty"`

	// user Id
	UserID int64 `json:"userId,omitempty"`

	// user ids
	UserIds []int64 `json:"userIds"`
}

// Validate validates this participant
func (m *Participant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotDeleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeammates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Participant) validateContest(formats strfmt.Registry) error {
	if swag.IsZero(m.Contest) { // not required
		return nil
	}

	if m.Contest != nil {
		if err := m.Contest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contest")
			}
			return err
		}
	}

	return nil
}

func (m *Participant) validateDeleted(formats strfmt.Registry) error {

	if err := validate.Required("deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateNotDeleted(formats strfmt.Registry) error {

	if err := validate.Required("notDeleted", "body", m.NotDeleted); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateTeam(formats strfmt.Registry) error {
	if swag.IsZero(m.Team) { // not required
		return nil
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *Participant) validateTeammates(formats strfmt.Registry) error {
	if swag.IsZero(m.Teammates) { // not required
		return nil
	}

	for i := 0; i < len(m.Teammates); i++ {
		if swag.IsZero(m.Teammates[i]) { // not required
			continue
		}

		if m.Teammates[i] != nil {
			if err := m.Teammates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teammates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Participant) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this participant based on the context it is used
func (m *Participant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeammates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Participant) contextValidateContest(ctx context.Context, formats strfmt.Registry) error {

	if m.Contest != nil {
		if err := m.Contest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contest")
			}
			return err
		}
	}

	return nil
}

func (m *Participant) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {
		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *Participant) contextValidateTeammates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Teammates); i++ {

		if m.Teammates[i] != nil {
			if err := m.Teammates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teammates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Participant) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Participant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Participant) UnmarshalBinary(b []byte) error {
	var res Participant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
