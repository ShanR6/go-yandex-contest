// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KTypeParameter KTypeParameter
//
// swagger:model KTypeParameter
type KTypeParameter struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// reified
	// Required: true
	Reified *bool `json:"reified"`

	// upper bounds
	// Required: true
	UpperBounds []*KType `json:"upperBounds"`

	// variance
	// Required: true
	// Enum: [INVARIANT IN OUT]
	Variance *string `json:"variance"`
}

// Validate validates this k type parameter
func (m *KTypeParameter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpperBounds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KTypeParameter) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KTypeParameter) validateReified(formats strfmt.Registry) error {

	if err := validate.Required("reified", "body", m.Reified); err != nil {
		return err
	}

	return nil
}

func (m *KTypeParameter) validateUpperBounds(formats strfmt.Registry) error {

	if err := validate.Required("upperBounds", "body", m.UpperBounds); err != nil {
		return err
	}

	for i := 0; i < len(m.UpperBounds); i++ {
		if swag.IsZero(m.UpperBounds[i]) { // not required
			continue
		}

		if m.UpperBounds[i] != nil {
			if err := m.UpperBounds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upperBounds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var kTypeParameterTypeVariancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVARIANT","IN","OUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kTypeParameterTypeVariancePropEnum = append(kTypeParameterTypeVariancePropEnum, v)
	}
}

const (

	// KTypeParameterVarianceINVARIANT captures enum value "INVARIANT"
	KTypeParameterVarianceINVARIANT string = "INVARIANT"

	// KTypeParameterVarianceIN captures enum value "IN"
	KTypeParameterVarianceIN string = "IN"

	// KTypeParameterVarianceOUT captures enum value "OUT"
	KTypeParameterVarianceOUT string = "OUT"
)

// prop value enum
func (m *KTypeParameter) validateVarianceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kTypeParameterTypeVariancePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KTypeParameter) validateVariance(formats strfmt.Registry) error {

	if err := validate.Required("variance", "body", m.Variance); err != nil {
		return err
	}

	// value enum
	if err := m.validateVarianceEnum("variance", "body", *m.Variance); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this k type parameter based on the context it is used
func (m *KTypeParameter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpperBounds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KTypeParameter) contextValidateUpperBounds(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UpperBounds); i++ {

		if m.UpperBounds[i] != nil {
			if err := m.UpperBounds[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upperBounds" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KTypeParameter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KTypeParameter) UnmarshalBinary(b []byte) error {
	var res KTypeParameter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
