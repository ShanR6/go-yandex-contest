// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Submission Submission
//
// swagger:model Submission
type Submission struct {

	// author
	// Required: true
	Author *string `json:"author"`

	// compiler
	// Required: true
	Compiler *string `json:"compiler"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// memory
	// Required: true
	Memory *int64 `json:"memory"`

	// problem alias
	// Required: true
	ProblemAlias *string `json:"problemAlias"`

	// problem Id
	// Required: true
	ProblemID *string `json:"problemId"`

	// test
	// Required: true
	Test *int32 `json:"test"`

	// time
	// Required: true
	Time *int64 `json:"time"`

	// verdict
	// Required: true
	Verdict *string `json:"verdict"`
}

// Validate validates this submission
func (m *Submission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompiler(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Submission) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateCompiler(formats strfmt.Registry) error {

	if err := validate.Required("compiler", "body", m.Compiler); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateProblemAlias(formats strfmt.Registry) error {

	if err := validate.Required("problemAlias", "body", m.ProblemAlias); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateProblemID(formats strfmt.Registry) error {

	if err := validate.Required("problemId", "body", m.ProblemID); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateTest(formats strfmt.Registry) error {

	if err := validate.Required("test", "body", m.Test); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *Submission) validateVerdict(formats strfmt.Registry) error {

	if err := validate.Required("verdict", "body", m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this submission based on context it is used
func (m *Submission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Submission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Submission) UnmarshalBinary(b []byte) error {
	var res Submission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
