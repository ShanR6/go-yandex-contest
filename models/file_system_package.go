// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FileSystemPackage FileSystemPackage
//
// swagger:discriminator FileSystemPackage type
type FileSystemPackage interface {
	runtime.Validatable
	runtime.ContextValidatable

	// name
	Name() string
	SetName(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type fileSystemPackage struct {
	nameField string
}

// Name gets the name of this polymorphic type
func (m *fileSystemPackage) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *fileSystemPackage) SetName(val string) {
	m.nameField = val
}

// UnmarshalFileSystemPackageSlice unmarshals polymorphic slices of FileSystemPackage
func UnmarshalFileSystemPackageSlice(reader io.Reader, consumer runtime.Consumer) ([]FileSystemPackage, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []FileSystemPackage
	for _, element := range elements {
		obj, err := unmarshalFileSystemPackage(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalFileSystemPackage unmarshals polymorphic FileSystemPackage
func UnmarshalFileSystemPackage(reader io.Reader, consumer runtime.Consumer) (FileSystemPackage, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalFileSystemPackage(data, consumer)
}

func unmarshalFileSystemPackage(data []byte, consumer runtime.Consumer) (FileSystemPackage, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "DirectoryPackage":
		var result DirectoryPackage
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "FilePackage":
		var result FilePackage
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "FileSystemPackage":
		var result fileSystemPackage
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this file system package
func (m *fileSystemPackage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this file system package based on context it is used
func (m *fileSystemPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
