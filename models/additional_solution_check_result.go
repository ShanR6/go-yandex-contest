// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalSolutionCheckResult AdditionalSolutionCheckResult
//
// swagger:model AdditionalSolutionCheckResult
type AdditionalSolutionCheckResult struct {

	// checker name
	CheckerName string `json:"checkerName,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// verdict
	// Enum: [OK FAILED]
	Verdict string `json:"verdict,omitempty"`
}

// Validate validates this additional solution check result
func (m *AdditionalSolutionCheckResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVerdict(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var additionalSolutionCheckResultTypeVerdictPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		additionalSolutionCheckResultTypeVerdictPropEnum = append(additionalSolutionCheckResultTypeVerdictPropEnum, v)
	}
}

const (

	// AdditionalSolutionCheckResultVerdictOK captures enum value "OK"
	AdditionalSolutionCheckResultVerdictOK string = "OK"

	// AdditionalSolutionCheckResultVerdictFAILED captures enum value "FAILED"
	AdditionalSolutionCheckResultVerdictFAILED string = "FAILED"
)

// prop value enum
func (m *AdditionalSolutionCheckResult) validateVerdictEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, additionalSolutionCheckResultTypeVerdictPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdditionalSolutionCheckResult) validateVerdict(formats strfmt.Registry) error {
	if swag.IsZero(m.Verdict) { // not required
		return nil
	}

	// value enum
	if err := m.validateVerdictEnum("verdict", "body", m.Verdict); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this additional solution check result based on context it is used
func (m *AdditionalSolutionCheckResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalSolutionCheckResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalSolutionCheckResult) UnmarshalBinary(b []byte) error {
	var res AdditionalSolutionCheckResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
