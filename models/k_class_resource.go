// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KClassResource KClass«Resource»
//
// swagger:model KClass«Resource»
type KClassResource struct {

	// abstract
	// Required: true
	Abstract *bool `json:"abstract"`

	// annotations
	// Required: true
	Annotations []Annotation `json:"annotations"`

	// companion
	// Required: true
	Companion *bool `json:"companion"`

	// constructors
	// Required: true
	Constructors []*KFunctionResource `json:"constructors"`

	// data
	// Required: true
	Data *bool `json:"data"`

	// final
	// Required: true
	Final *bool `json:"final"`

	// inner
	// Required: true
	Inner *bool `json:"inner"`

	// members
	// Required: true
	Members []*KCallableObject `json:"members"`

	// nested classes
	// Required: true
	NestedClasses []*KClassObject `json:"nestedClasses"`

	// object instance
	ObjectInstance *Resource `json:"objectInstance,omitempty"`

	// open
	// Required: true
	Open *bool `json:"open"`

	// qualified name
	QualifiedName string `json:"qualifiedName,omitempty"`

	// sealed
	// Required: true
	Sealed *bool `json:"sealed"`

	// sealed subclasses
	// Required: true
	SealedSubclasses []*KClassResource `json:"sealedSubclasses"`

	// simple name
	SimpleName string `json:"simpleName,omitempty"`

	// supertypes
	// Required: true
	Supertypes []*KType `json:"supertypes"`

	// type parameters
	// Required: true
	TypeParameters []*KTypeParameter `json:"typeParameters"`

	// visibility
	// Enum: [PUBLIC PROTECTED INTERNAL PRIVATE]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this k class resource
func (m *KClassResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbstract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConstructors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNestedClasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSealed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSealedSubclasses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupertypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KClassResource) validateAbstract(formats strfmt.Registry) error {

	if err := validate.Required("abstract", "body", m.Abstract); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateAnnotations(formats strfmt.Registry) error {

	if err := validate.Required("annotations", "body", m.Annotations); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateCompanion(formats strfmt.Registry) error {

	if err := validate.Required("companion", "body", m.Companion); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateConstructors(formats strfmt.Registry) error {

	if err := validate.Required("constructors", "body", m.Constructors); err != nil {
		return err
	}

	for i := 0; i < len(m.Constructors); i++ {
		if swag.IsZero(m.Constructors[i]) { // not required
			continue
		}

		if m.Constructors[i] != nil {
			if err := m.Constructors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constructors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateFinal(formats strfmt.Registry) error {

	if err := validate.Required("final", "body", m.Final); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateInner(formats strfmt.Registry) error {

	if err := validate.Required("inner", "body", m.Inner); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) validateNestedClasses(formats strfmt.Registry) error {

	if err := validate.Required("nestedClasses", "body", m.NestedClasses); err != nil {
		return err
	}

	for i := 0; i < len(m.NestedClasses); i++ {
		if swag.IsZero(m.NestedClasses[i]) { // not required
			continue
		}

		if m.NestedClasses[i] != nil {
			if err := m.NestedClasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) validateObjectInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectInstance) { // not required
		return nil
	}

	if m.ObjectInstance != nil {
		if err := m.ObjectInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInstance")
			}
			return err
		}
	}

	return nil
}

func (m *KClassResource) validateOpen(formats strfmt.Registry) error {

	if err := validate.Required("open", "body", m.Open); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateSealed(formats strfmt.Registry) error {

	if err := validate.Required("sealed", "body", m.Sealed); err != nil {
		return err
	}

	return nil
}

func (m *KClassResource) validateSealedSubclasses(formats strfmt.Registry) error {

	if err := validate.Required("sealedSubclasses", "body", m.SealedSubclasses); err != nil {
		return err
	}

	for i := 0; i < len(m.SealedSubclasses); i++ {
		if swag.IsZero(m.SealedSubclasses[i]) { // not required
			continue
		}

		if m.SealedSubclasses[i] != nil {
			if err := m.SealedSubclasses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sealedSubclasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) validateSupertypes(formats strfmt.Registry) error {

	if err := validate.Required("supertypes", "body", m.Supertypes); err != nil {
		return err
	}

	for i := 0; i < len(m.Supertypes); i++ {
		if swag.IsZero(m.Supertypes[i]) { // not required
			continue
		}

		if m.Supertypes[i] != nil {
			if err := m.Supertypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supertypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) validateTypeParameters(formats strfmt.Registry) error {

	if err := validate.Required("typeParameters", "body", m.TypeParameters); err != nil {
		return err
	}

	for i := 0; i < len(m.TypeParameters); i++ {
		if swag.IsZero(m.TypeParameters[i]) { // not required
			continue
		}

		if m.TypeParameters[i] != nil {
			if err := m.TypeParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var kClassResourceTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PROTECTED","INTERNAL","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kClassResourceTypeVisibilityPropEnum = append(kClassResourceTypeVisibilityPropEnum, v)
	}
}

const (

	// KClassResourceVisibilityPUBLIC captures enum value "PUBLIC"
	KClassResourceVisibilityPUBLIC string = "PUBLIC"

	// KClassResourceVisibilityPROTECTED captures enum value "PROTECTED"
	KClassResourceVisibilityPROTECTED string = "PROTECTED"

	// KClassResourceVisibilityINTERNAL captures enum value "INTERNAL"
	KClassResourceVisibilityINTERNAL string = "INTERNAL"

	// KClassResourceVisibilityPRIVATE captures enum value "PRIVATE"
	KClassResourceVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *KClassResource) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kClassResourceTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KClassResource) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this k class resource based on the context it is used
func (m *KClassResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConstructors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNestedClasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSealedSubclasses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupertypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KClassResource) contextValidateConstructors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Constructors); i++ {

		if m.Constructors[i] != nil {
			if err := m.Constructors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("constructors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) contextValidateMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Members); i++ {

		if m.Members[i] != nil {
			if err := m.Members[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) contextValidateNestedClasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NestedClasses); i++ {

		if m.NestedClasses[i] != nil {
			if err := m.NestedClasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nestedClasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) contextValidateObjectInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectInstance != nil {
		if err := m.ObjectInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectInstance")
			}
			return err
		}
	}

	return nil
}

func (m *KClassResource) contextValidateSealedSubclasses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SealedSubclasses); i++ {

		if m.SealedSubclasses[i] != nil {
			if err := m.SealedSubclasses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sealedSubclasses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) contextValidateSupertypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Supertypes); i++ {

		if m.Supertypes[i] != nil {
			if err := m.Supertypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supertypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KClassResource) contextValidateTypeParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TypeParameters); i++ {

		if m.TypeParameters[i] != nil {
			if err := m.TypeParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("typeParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KClassResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KClassResource) UnmarshalBinary(b []byte) error {
	var res KClassResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
