// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DirectoryPackageAllOf1 DirectoryPackage
//
// swagger:model directoryPackageAllOf1
type DirectoryPackageAllOf1 struct {

	// name
	Name string `json:"name,omitempty"`

	packagesField []FileSystemPackage
}

// Packages gets the packages of this base type
func (m *DirectoryPackageAllOf1) Packages() []FileSystemPackage {
	return m.packagesField
}

// SetPackages sets the packages of this base type
func (m *DirectoryPackageAllOf1) SetPackages(val []FileSystemPackage) {
	m.packagesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *DirectoryPackageAllOf1) UnmarshalJSON(raw []byte) error {
	var data struct {
		Name string `json:"name,omitempty"`

		Packages json.RawMessage `json:"packages"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propPackages []FileSystemPackage
	if string(data.Packages) != "null" {
		packages, err := UnmarshalFileSystemPackageSlice(bytes.NewBuffer(data.Packages), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propPackages = packages
	}

	var result DirectoryPackageAllOf1

	// name
	result.Name = data.Name

	// packages
	result.packagesField = propPackages

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m DirectoryPackageAllOf1) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Name string `json:"name,omitempty"`
	}{

		Name: m.Name,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Packages []FileSystemPackage `json:"packages"`
	}{

		Packages: m.packagesField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this directory package all of1
func (m *DirectoryPackageAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryPackageAllOf1) validatePackages(formats strfmt.Registry) error {
	if swag.IsZero(m.Packages()) { // not required
		return nil
	}

	for i := 0; i < len(m.Packages()); i++ {

		if err := m.packagesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this directory package all of1 based on the context it is used
func (m *DirectoryPackageAllOf1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryPackageAllOf1) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Packages()); i++ {

		if err := m.packagesField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packages" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryPackageAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryPackageAllOf1) UnmarshalBinary(b []byte) error {
	var res DirectoryPackageAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
