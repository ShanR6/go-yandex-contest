// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contest Contest
//
// swagger:model Contest
type Contest struct {

	// compilers
	Compilers []string `json:"compilers"`

	// duration
	Duration *Duration `json:"duration,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// end time
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// finished
	Finished bool `json:"finished,omitempty"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// infinite
	Infinite bool `json:"infinite,omitempty"`

	// monitor
	Monitor *MonitorConfiguration `json:"monitor,omitempty"`

	// monitor plugin
	MonitorPlugin string `json:"monitorPlugin,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner *User `json:"owner,omitempty"`

	// problem set Id
	ProblemSetID string `json:"problemSetId,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// testing settings
	TestingSettings *ContestTestingSettings `json:"testingSettings,omitempty"`

	// time control type
	// Enum: [USUAL VIRTUAL]
	TimeControlType string `json:"timeControlType,omitempty"`

	// time limited
	TimeLimited bool `json:"timeLimited,omitempty"`
}

// Validate validates this contest
func (m *Contest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestingSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeControlType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contest) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if m.Duration != nil {
		if err := m.Duration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Contest) validateMonitor(formats strfmt.Registry) error {
	if swag.IsZero(m.Monitor) { // not required
		return nil
	}

	if m.Monitor != nil {
		if err := m.Monitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Contest) validateTestingSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.TestingSettings) { // not required
		return nil
	}

	if m.TestingSettings != nil {
		if err := m.TestingSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testingSettings")
			}
			return err
		}
	}

	return nil
}

var contestTypeTimeControlTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USUAL","VIRTUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contestTypeTimeControlTypePropEnum = append(contestTypeTimeControlTypePropEnum, v)
	}
}

const (

	// ContestTimeControlTypeUSUAL captures enum value "USUAL"
	ContestTimeControlTypeUSUAL string = "USUAL"

	// ContestTimeControlTypeVIRTUAL captures enum value "VIRTUAL"
	ContestTimeControlTypeVIRTUAL string = "VIRTUAL"
)

// prop value enum
func (m *Contest) validateTimeControlTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contestTypeTimeControlTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Contest) validateTimeControlType(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeControlType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeControlTypeEnum("timeControlType", "body", m.TimeControlType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contest based on the context it is used
func (m *Contest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDuration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTestingSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contest) contextValidateDuration(ctx context.Context, formats strfmt.Registry) error {

	if m.Duration != nil {
		if err := m.Duration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duration")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) contextValidateMonitor(ctx context.Context, formats strfmt.Registry) error {

	if m.Monitor != nil {
		if err := m.Monitor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Contest) contextValidateTestingSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.TestingSettings != nil {
		if err := m.TestingSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testingSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contest) UnmarshalBinary(b []byte) error {
	var res Contest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
