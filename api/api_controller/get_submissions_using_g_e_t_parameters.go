// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSubmissionsUsingGETParams creates a new GetSubmissionsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSubmissionsUsingGETParams() *GetSubmissionsUsingGETParams {
	return &GetSubmissionsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubmissionsUsingGETParamsWithTimeout creates a new GetSubmissionsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetSubmissionsUsingGETParamsWithTimeout(timeout time.Duration) *GetSubmissionsUsingGETParams {
	return &GetSubmissionsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetSubmissionsUsingGETParamsWithContext creates a new GetSubmissionsUsingGETParams object
// with the ability to set a context for a request.
func NewGetSubmissionsUsingGETParamsWithContext(ctx context.Context) *GetSubmissionsUsingGETParams {
	return &GetSubmissionsUsingGETParams{
		Context: ctx,
	}
}

// NewGetSubmissionsUsingGETParamsWithHTTPClient creates a new GetSubmissionsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSubmissionsUsingGETParamsWithHTTPClient(client *http.Client) *GetSubmissionsUsingGETParams {
	return &GetSubmissionsUsingGETParams{
		HTTPClient: client,
	}
}

/* GetSubmissionsUsingGETParams contains all the parameters to send to the API endpoint
   for the get submissions using g e t operation.

   Typically these are written to a http.Request.
*/
type GetSubmissionsUsingGETParams struct {

	/* ContestID.

	   contestId

	   Format: int64
	*/
	ContestID int64

	/* Locale.

	   locale

	   Default: "ru"
	*/
	Locale *string

	/* Page.

	   page

	   Default: "1"
	*/
	Page *string

	/* PageSize.

	   pageSize

	   Default: "100"
	*/
	PageSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get submissions using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubmissionsUsingGETParams) WithDefaults() *GetSubmissionsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get submissions using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubmissionsUsingGETParams) SetDefaults() {
	var (
		localeDefault = string("ru")

		pageDefault = string("1")

		pageSizeDefault = string("100")
	)

	val := GetSubmissionsUsingGETParams{
		Locale:   &localeDefault,
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithTimeout(timeout time.Duration) *GetSubmissionsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithContext(ctx context.Context) *GetSubmissionsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithHTTPClient(client *http.Client) *GetSubmissionsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContestID adds the contestID to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithContestID(contestID int64) *GetSubmissionsUsingGETParams {
	o.SetContestID(contestID)
	return o
}

// SetContestID adds the contestId to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetContestID(contestID int64) {
	o.ContestID = contestID
}

// WithLocale adds the locale to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithLocale(locale *string) *GetSubmissionsUsingGETParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithPage adds the page to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithPage(page *string) *GetSubmissionsUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) WithPageSize(pageSize *string) *GetSubmissionsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get submissions using g e t params
func (o *GetSubmissionsUsingGETParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubmissionsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contestId
	if err := r.SetPathParam("contestId", swag.FormatInt64(o.ContestID)); err != nil {
		return err
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string

		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {

			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
