// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMultipleRunReportsUsingGETParams creates a new GetMultipleRunReportsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMultipleRunReportsUsingGETParams() *GetMultipleRunReportsUsingGETParams {
	return &GetMultipleRunReportsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMultipleRunReportsUsingGETParamsWithTimeout creates a new GetMultipleRunReportsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetMultipleRunReportsUsingGETParamsWithTimeout(timeout time.Duration) *GetMultipleRunReportsUsingGETParams {
	return &GetMultipleRunReportsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetMultipleRunReportsUsingGETParamsWithContext creates a new GetMultipleRunReportsUsingGETParams object
// with the ability to set a context for a request.
func NewGetMultipleRunReportsUsingGETParamsWithContext(ctx context.Context) *GetMultipleRunReportsUsingGETParams {
	return &GetMultipleRunReportsUsingGETParams{
		Context: ctx,
	}
}

// NewGetMultipleRunReportsUsingGETParamsWithHTTPClient creates a new GetMultipleRunReportsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMultipleRunReportsUsingGETParamsWithHTTPClient(client *http.Client) *GetMultipleRunReportsUsingGETParams {
	return &GetMultipleRunReportsUsingGETParams{
		HTTPClient: client,
	}
}

/* GetMultipleRunReportsUsingGETParams contains all the parameters to send to the API endpoint
   for the get multiple run reports using g e t operation.

   Typically these are written to a http.Request.
*/
type GetMultipleRunReportsUsingGETParams struct {

	/* ContestID.

	   contestId

	   Format: int64
	*/
	ContestID int64

	/* Locale.

	   locale
	*/
	Locale *string

	/* RunIds.

	   runIds
	*/
	RunIds []int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get multiple run reports using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMultipleRunReportsUsingGETParams) WithDefaults() *GetMultipleRunReportsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get multiple run reports using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMultipleRunReportsUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithTimeout(timeout time.Duration) *GetMultipleRunReportsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithContext(ctx context.Context) *GetMultipleRunReportsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithHTTPClient(client *http.Client) *GetMultipleRunReportsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContestID adds the contestID to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithContestID(contestID int64) *GetMultipleRunReportsUsingGETParams {
	o.SetContestID(contestID)
	return o
}

// SetContestID adds the contestId to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetContestID(contestID int64) {
	o.ContestID = contestID
}

// WithLocale adds the locale to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithLocale(locale *string) *GetMultipleRunReportsUsingGETParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithRunIds adds the runIds to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) WithRunIds(runIds []int64) *GetMultipleRunReportsUsingGETParams {
	o.SetRunIds(runIds)
	return o
}

// SetRunIds adds the runIds to the get multiple run reports using g e t params
func (o *GetMultipleRunReportsUsingGETParams) SetRunIds(runIds []int64) {
	o.RunIds = runIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetMultipleRunReportsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contestId
	if err := r.SetPathParam("contestId", swag.FormatInt64(o.ContestID)); err != nil {
		return err
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string

		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {

			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}
	}

	if o.RunIds != nil {

		// binding items for runIds
		joinedRunIds := o.bindParamRunIds(reg)

		// query array param runIds
		if err := r.SetQueryParam("runIds", joinedRunIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetMultipleRunReportsUsingGET binds the parameter runIds
func (o *GetMultipleRunReportsUsingGETParams) bindParamRunIds(formats strfmt.Registry) []string {
	runIdsIR := o.RunIds

	var runIdsIC []string
	for _, runIdsIIR := range runIdsIR { // explode []int64

		runIdsIIV := swag.FormatInt64(runIdsIIR) // int64 as string
		runIdsIC = append(runIdsIC, runIdsIIV)
	}

	// items.CollectionFormat: "multi"
	runIdsIS := swag.JoinByFormat(runIdsIC, "multi")

	return runIdsIS
}
