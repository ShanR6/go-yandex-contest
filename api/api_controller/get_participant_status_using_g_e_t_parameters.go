// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetParticipantStatusUsingGETParams creates a new GetParticipantStatusUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetParticipantStatusUsingGETParams() *GetParticipantStatusUsingGETParams {
	return &GetParticipantStatusUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetParticipantStatusUsingGETParamsWithTimeout creates a new GetParticipantStatusUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetParticipantStatusUsingGETParamsWithTimeout(timeout time.Duration) *GetParticipantStatusUsingGETParams {
	return &GetParticipantStatusUsingGETParams{
		timeout: timeout,
	}
}

// NewGetParticipantStatusUsingGETParamsWithContext creates a new GetParticipantStatusUsingGETParams object
// with the ability to set a context for a request.
func NewGetParticipantStatusUsingGETParamsWithContext(ctx context.Context) *GetParticipantStatusUsingGETParams {
	return &GetParticipantStatusUsingGETParams{
		Context: ctx,
	}
}

// NewGetParticipantStatusUsingGETParamsWithHTTPClient creates a new GetParticipantStatusUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetParticipantStatusUsingGETParamsWithHTTPClient(client *http.Client) *GetParticipantStatusUsingGETParams {
	return &GetParticipantStatusUsingGETParams{
		HTTPClient: client,
	}
}

/* GetParticipantStatusUsingGETParams contains all the parameters to send to the API endpoint
   for the get participant status using g e t operation.

   Typically these are written to a http.Request.
*/
type GetParticipantStatusUsingGETParams struct {

	/* ContestID.

	   contestId

	   Format: int64
	*/
	ContestID int64

	/* ParticipantID.

	   participantId

	   Format: int64
	*/
	ParticipantID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get participant status using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetParticipantStatusUsingGETParams) WithDefaults() *GetParticipantStatusUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get participant status using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetParticipantStatusUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) WithTimeout(timeout time.Duration) *GetParticipantStatusUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) WithContext(ctx context.Context) *GetParticipantStatusUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) WithHTTPClient(client *http.Client) *GetParticipantStatusUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContestID adds the contestID to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) WithContestID(contestID int64) *GetParticipantStatusUsingGETParams {
	o.SetContestID(contestID)
	return o
}

// SetContestID adds the contestId to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) SetContestID(contestID int64) {
	o.ContestID = contestID
}

// WithParticipantID adds the participantID to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) WithParticipantID(participantID int64) *GetParticipantStatusUsingGETParams {
	o.SetParticipantID(participantID)
	return o
}

// SetParticipantID adds the participantId to the get participant status using g e t params
func (o *GetParticipantStatusUsingGETParams) SetParticipantID(participantID int64) {
	o.ParticipantID = participantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetParticipantStatusUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contestId
	if err := r.SetPathParam("contestId", swag.FormatInt64(o.ContestID)); err != nil {
		return err
	}

	// path param participantId
	if err := r.SetPathParam("participantId", swag.FormatInt64(o.ParticipantID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
