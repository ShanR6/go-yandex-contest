// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetFullInputUsingGETParams creates a new GetFullInputUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFullInputUsingGETParams() *GetFullInputUsingGETParams {
	return &GetFullInputUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFullInputUsingGETParamsWithTimeout creates a new GetFullInputUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetFullInputUsingGETParamsWithTimeout(timeout time.Duration) *GetFullInputUsingGETParams {
	return &GetFullInputUsingGETParams{
		timeout: timeout,
	}
}

// NewGetFullInputUsingGETParamsWithContext creates a new GetFullInputUsingGETParams object
// with the ability to set a context for a request.
func NewGetFullInputUsingGETParamsWithContext(ctx context.Context) *GetFullInputUsingGETParams {
	return &GetFullInputUsingGETParams{
		Context: ctx,
	}
}

// NewGetFullInputUsingGETParamsWithHTTPClient creates a new GetFullInputUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFullInputUsingGETParamsWithHTTPClient(client *http.Client) *GetFullInputUsingGETParams {
	return &GetFullInputUsingGETParams{
		HTTPClient: client,
	}
}

/* GetFullInputUsingGETParams contains all the parameters to send to the API endpoint
   for the get full input using g e t operation.

   Typically these are written to a http.Request.
*/
type GetFullInputUsingGETParams struct {

	/* ContestID.

	   contestId

	   Format: int64
	*/
	ContestID int64

	/* RunID.

	   runId

	   Format: int64
	*/
	RunID int64

	/* TestName.

	   testName
	*/
	TestName string

	/* UseReportSettings.

	   useReportSettings
	*/
	UseReportSettings *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get full input using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFullInputUsingGETParams) WithDefaults() *GetFullInputUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get full input using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFullInputUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithTimeout(timeout time.Duration) *GetFullInputUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithContext(ctx context.Context) *GetFullInputUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithHTTPClient(client *http.Client) *GetFullInputUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContestID adds the contestID to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithContestID(contestID int64) *GetFullInputUsingGETParams {
	o.SetContestID(contestID)
	return o
}

// SetContestID adds the contestId to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetContestID(contestID int64) {
	o.ContestID = contestID
}

// WithRunID adds the runID to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithRunID(runID int64) *GetFullInputUsingGETParams {
	o.SetRunID(runID)
	return o
}

// SetRunID adds the runId to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetRunID(runID int64) {
	o.RunID = runID
}

// WithTestName adds the testName to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithTestName(testName string) *GetFullInputUsingGETParams {
	o.SetTestName(testName)
	return o
}

// SetTestName adds the testName to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetTestName(testName string) {
	o.TestName = testName
}

// WithUseReportSettings adds the useReportSettings to the get full input using g e t params
func (o *GetFullInputUsingGETParams) WithUseReportSettings(useReportSettings *bool) *GetFullInputUsingGETParams {
	o.SetUseReportSettings(useReportSettings)
	return o
}

// SetUseReportSettings adds the useReportSettings to the get full input using g e t params
func (o *GetFullInputUsingGETParams) SetUseReportSettings(useReportSettings *bool) {
	o.UseReportSettings = useReportSettings
}

// WriteToRequest writes these params to a swagger request
func (o *GetFullInputUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contestId
	if err := r.SetPathParam("contestId", swag.FormatInt64(o.ContestID)); err != nil {
		return err
	}

	// path param runId
	if err := r.SetPathParam("runId", swag.FormatInt64(o.RunID)); err != nil {
		return err
	}

	// path param testName
	if err := r.SetPathParam("testName", o.TestName); err != nil {
		return err
	}

	if o.UseReportSettings != nil {

		// query param useReportSettings
		var qrUseReportSettings bool

		if o.UseReportSettings != nil {
			qrUseReportSettings = *o.UseReportSettings
		}
		qUseReportSettings := swag.FormatBool(qrUseReportSettings)
		if qUseReportSettings != "" {

			if err := r.SetQueryParam("useReportSettings", qUseReportSettings); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
