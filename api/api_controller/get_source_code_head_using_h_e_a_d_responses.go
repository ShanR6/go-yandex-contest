// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/teamdbnn/go-yandex-contest/models"
)

// GetSourceCodeHeadUsingHEADReader is a Reader for the GetSourceCodeHeadUsingHEAD structure.
type GetSourceCodeHeadUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSourceCodeHeadUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSourceCodeHeadUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSourceCodeHeadUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSourceCodeHeadUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSourceCodeHeadUsingHEADNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSourceCodeHeadUsingHEADOK creates a GetSourceCodeHeadUsingHEADOK with default headers values
func NewGetSourceCodeHeadUsingHEADOK() *GetSourceCodeHeadUsingHEADOK {
	return &GetSourceCodeHeadUsingHEADOK{}
}

/* GetSourceCodeHeadUsingHEADOK describes a response with status code 200, with default header values.

Successfully received detailed information
*/
type GetSourceCodeHeadUsingHEADOK struct {
	Payload *models.HTTPEntity
}

func (o *GetSourceCodeHeadUsingHEADOK) Error() string {
	return fmt.Sprintf("[HEAD /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeHeadUsingHEADOK  %+v", 200, o.Payload)
}
func (o *GetSourceCodeHeadUsingHEADOK) GetPayload() *models.HTTPEntity {
	return o.Payload
}

func (o *GetSourceCodeHeadUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSourceCodeHeadUsingHEADUnauthorized creates a GetSourceCodeHeadUsingHEADUnauthorized with default headers values
func NewGetSourceCodeHeadUsingHEADUnauthorized() *GetSourceCodeHeadUsingHEADUnauthorized {
	return &GetSourceCodeHeadUsingHEADUnauthorized{}
}

/* GetSourceCodeHeadUsingHEADUnauthorized describes a response with status code 401, with default header values.

OAuth header is not declared or is wrong
*/
type GetSourceCodeHeadUsingHEADUnauthorized struct {
}

func (o *GetSourceCodeHeadUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeHeadUsingHEADUnauthorized ", 401)
}

func (o *GetSourceCodeHeadUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSourceCodeHeadUsingHEADForbidden creates a GetSourceCodeHeadUsingHEADForbidden with default headers values
func NewGetSourceCodeHeadUsingHEADForbidden() *GetSourceCodeHeadUsingHEADForbidden {
	return &GetSourceCodeHeadUsingHEADForbidden{}
}

/* GetSourceCodeHeadUsingHEADForbidden describes a response with status code 403, with default header values.

You don't have enough permissions
*/
type GetSourceCodeHeadUsingHEADForbidden struct {
}

func (o *GetSourceCodeHeadUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeHeadUsingHEADForbidden ", 403)
}

func (o *GetSourceCodeHeadUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSourceCodeHeadUsingHEADNotFound creates a GetSourceCodeHeadUsingHEADNotFound with default headers values
func NewGetSourceCodeHeadUsingHEADNotFound() *GetSourceCodeHeadUsingHEADNotFound {
	return &GetSourceCodeHeadUsingHEADNotFound{}
}

/* GetSourceCodeHeadUsingHEADNotFound describes a response with status code 404, with default header values.

Contest or your participation is not found
*/
type GetSourceCodeHeadUsingHEADNotFound struct {
}

func (o *GetSourceCodeHeadUsingHEADNotFound) Error() string {
	return fmt.Sprintf("[HEAD /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeHeadUsingHEADNotFound ", 404)
}

func (o *GetSourceCodeHeadUsingHEADNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
