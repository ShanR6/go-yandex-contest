// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetSourceCodeUsingGETReader is a Reader for the GetSourceCodeUsingGET structure.
type GetSourceCodeUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSourceCodeUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSourceCodeUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSourceCodeUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSourceCodeUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSourceCodeUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSourceCodeUsingGETOK creates a GetSourceCodeUsingGETOK with default headers values
func NewGetSourceCodeUsingGETOK() *GetSourceCodeUsingGETOK {
	return &GetSourceCodeUsingGETOK{}
}

/* GetSourceCodeUsingGETOK describes a response with status code 200, with default header values.

Successfully received detailed information
*/
type GetSourceCodeUsingGETOK struct {
	Payload strfmt.Base64
}

func (o *GetSourceCodeUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetSourceCodeUsingGETOK) GetPayload() strfmt.Base64 {
	return o.Payload
}

func (o *GetSourceCodeUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSourceCodeUsingGETUnauthorized creates a GetSourceCodeUsingGETUnauthorized with default headers values
func NewGetSourceCodeUsingGETUnauthorized() *GetSourceCodeUsingGETUnauthorized {
	return &GetSourceCodeUsingGETUnauthorized{}
}

/* GetSourceCodeUsingGETUnauthorized describes a response with status code 401, with default header values.

OAuth header is not declared or is wrong
*/
type GetSourceCodeUsingGETUnauthorized struct {
}

func (o *GetSourceCodeUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeUsingGETUnauthorized ", 401)
}

func (o *GetSourceCodeUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSourceCodeUsingGETForbidden creates a GetSourceCodeUsingGETForbidden with default headers values
func NewGetSourceCodeUsingGETForbidden() *GetSourceCodeUsingGETForbidden {
	return &GetSourceCodeUsingGETForbidden{}
}

/* GetSourceCodeUsingGETForbidden describes a response with status code 403, with default header values.

You don't have enough permissions
*/
type GetSourceCodeUsingGETForbidden struct {
}

func (o *GetSourceCodeUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeUsingGETForbidden ", 403)
}

func (o *GetSourceCodeUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSourceCodeUsingGETNotFound creates a GetSourceCodeUsingGETNotFound with default headers values
func NewGetSourceCodeUsingGETNotFound() *GetSourceCodeUsingGETNotFound {
	return &GetSourceCodeUsingGETNotFound{}
}

/* GetSourceCodeUsingGETNotFound describes a response with status code 404, with default header values.

Contest or your participation is not found
*/
type GetSourceCodeUsingGETNotFound struct {
}

func (o *GetSourceCodeUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/{runId}/source][%d] getSourceCodeUsingGETNotFound ", 404)
}

func (o *GetSourceCodeUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
