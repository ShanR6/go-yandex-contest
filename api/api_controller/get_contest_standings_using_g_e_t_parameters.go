// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetContestStandingsUsingGETParams creates a new GetContestStandingsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContestStandingsUsingGETParams() *GetContestStandingsUsingGETParams {
	return &GetContestStandingsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContestStandingsUsingGETParamsWithTimeout creates a new GetContestStandingsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetContestStandingsUsingGETParamsWithTimeout(timeout time.Duration) *GetContestStandingsUsingGETParams {
	return &GetContestStandingsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetContestStandingsUsingGETParamsWithContext creates a new GetContestStandingsUsingGETParams object
// with the ability to set a context for a request.
func NewGetContestStandingsUsingGETParamsWithContext(ctx context.Context) *GetContestStandingsUsingGETParams {
	return &GetContestStandingsUsingGETParams{
		Context: ctx,
	}
}

// NewGetContestStandingsUsingGETParamsWithHTTPClient creates a new GetContestStandingsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContestStandingsUsingGETParamsWithHTTPClient(client *http.Client) *GetContestStandingsUsingGETParams {
	return &GetContestStandingsUsingGETParams{
		HTTPClient: client,
	}
}

/* GetContestStandingsUsingGETParams contains all the parameters to send to the API endpoint
   for the get contest standings using g e t operation.

   Typically these are written to a http.Request.
*/
type GetContestStandingsUsingGETParams struct {

	/* ContestID.

	   contestId

	   Format: int64
	*/
	ContestID int64

	/* ForJudge.

	   forJudge

	   Default: "false"
	*/
	ForJudge *string

	/* Locale.

	   locale

	   Default: "ru"
	*/
	Locale *string

	/* Page.

	   page

	   Default: "1"
	*/
	Page *string

	/* PageSize.

	   pageSize

	   Default: "100"
	*/
	PageSize *string

	/* ParticipantSearch.

	   participantSearch
	*/
	ParticipantSearch *string

	/* ShowExternal.

	   showExternal

	   Default: "false"
	*/
	ShowExternal *string

	/* ShowVirtual.

	   showVirtual

	   Default: "false"
	*/
	ShowVirtual *string

	/* UserGroupID.

	   userGroupId
	*/
	UserGroupID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get contest standings using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContestStandingsUsingGETParams) WithDefaults() *GetContestStandingsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get contest standings using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContestStandingsUsingGETParams) SetDefaults() {
	var (
		forJudgeDefault = string("false")

		localeDefault = string("ru")

		pageDefault = string("1")

		pageSizeDefault = string("100")

		showExternalDefault = string("false")

		showVirtualDefault = string("false")
	)

	val := GetContestStandingsUsingGETParams{
		ForJudge:     &forJudgeDefault,
		Locale:       &localeDefault,
		Page:         &pageDefault,
		PageSize:     &pageSizeDefault,
		ShowExternal: &showExternalDefault,
		ShowVirtual:  &showVirtualDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithTimeout(timeout time.Duration) *GetContestStandingsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithContext(ctx context.Context) *GetContestStandingsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithHTTPClient(client *http.Client) *GetContestStandingsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContestID adds the contestID to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithContestID(contestID int64) *GetContestStandingsUsingGETParams {
	o.SetContestID(contestID)
	return o
}

// SetContestID adds the contestId to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetContestID(contestID int64) {
	o.ContestID = contestID
}

// WithForJudge adds the forJudge to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithForJudge(forJudge *string) *GetContestStandingsUsingGETParams {
	o.SetForJudge(forJudge)
	return o
}

// SetForJudge adds the forJudge to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetForJudge(forJudge *string) {
	o.ForJudge = forJudge
}

// WithLocale adds the locale to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithLocale(locale *string) *GetContestStandingsUsingGETParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithPage adds the page to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithPage(page *string) *GetContestStandingsUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetPage(page *string) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithPageSize(pageSize *string) *GetContestStandingsUsingGETParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetPageSize(pageSize *string) {
	o.PageSize = pageSize
}

// WithParticipantSearch adds the participantSearch to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithParticipantSearch(participantSearch *string) *GetContestStandingsUsingGETParams {
	o.SetParticipantSearch(participantSearch)
	return o
}

// SetParticipantSearch adds the participantSearch to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetParticipantSearch(participantSearch *string) {
	o.ParticipantSearch = participantSearch
}

// WithShowExternal adds the showExternal to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithShowExternal(showExternal *string) *GetContestStandingsUsingGETParams {
	o.SetShowExternal(showExternal)
	return o
}

// SetShowExternal adds the showExternal to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetShowExternal(showExternal *string) {
	o.ShowExternal = showExternal
}

// WithShowVirtual adds the showVirtual to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithShowVirtual(showVirtual *string) *GetContestStandingsUsingGETParams {
	o.SetShowVirtual(showVirtual)
	return o
}

// SetShowVirtual adds the showVirtual to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetShowVirtual(showVirtual *string) {
	o.ShowVirtual = showVirtual
}

// WithUserGroupID adds the userGroupID to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) WithUserGroupID(userGroupID *string) *GetContestStandingsUsingGETParams {
	o.SetUserGroupID(userGroupID)
	return o
}

// SetUserGroupID adds the userGroupId to the get contest standings using g e t params
func (o *GetContestStandingsUsingGETParams) SetUserGroupID(userGroupID *string) {
	o.UserGroupID = userGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *GetContestStandingsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contestId
	if err := r.SetPathParam("contestId", swag.FormatInt64(o.ContestID)); err != nil {
		return err
	}

	if o.ForJudge != nil {

		// query param forJudge
		var qrForJudge string

		if o.ForJudge != nil {
			qrForJudge = *o.ForJudge
		}
		qForJudge := qrForJudge
		if qForJudge != "" {

			if err := r.SetQueryParam("forJudge", qForJudge); err != nil {
				return err
			}
		}
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string

		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {

			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize string

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := qrPageSize
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ParticipantSearch != nil {

		// query param participantSearch
		var qrParticipantSearch string

		if o.ParticipantSearch != nil {
			qrParticipantSearch = *o.ParticipantSearch
		}
		qParticipantSearch := qrParticipantSearch
		if qParticipantSearch != "" {

			if err := r.SetQueryParam("participantSearch", qParticipantSearch); err != nil {
				return err
			}
		}
	}

	if o.ShowExternal != nil {

		// query param showExternal
		var qrShowExternal string

		if o.ShowExternal != nil {
			qrShowExternal = *o.ShowExternal
		}
		qShowExternal := qrShowExternal
		if qShowExternal != "" {

			if err := r.SetQueryParam("showExternal", qShowExternal); err != nil {
				return err
			}
		}
	}

	if o.ShowVirtual != nil {

		// query param showVirtual
		var qrShowVirtual string

		if o.ShowVirtual != nil {
			qrShowVirtual = *o.ShowVirtual
		}
		qShowVirtual := qrShowVirtual
		if qShowVirtual != "" {

			if err := r.SetQueryParam("showVirtual", qShowVirtual); err != nil {
				return err
			}
		}
	}

	if o.UserGroupID != nil {

		// query param userGroupId
		var qrUserGroupID string

		if o.UserGroupID != nil {
			qrUserGroupID = *o.UserGroupID
		}
		qUserGroupID := qrUserGroupID
		if qUserGroupID != "" {

			if err := r.SetQueryParam("userGroupId", qUserGroupID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
