// Code generated by go-swagger; DO NOT EDIT.

package api_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/teamdbnn/go-yandex-contest/models"
)

// GetMultipleRunReportsUsingGETReader is a Reader for the GetMultipleRunReportsUsingGET structure.
type GetMultipleRunReportsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMultipleRunReportsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMultipleRunReportsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetMultipleRunReportsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMultipleRunReportsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMultipleRunReportsUsingGETOK creates a GetMultipleRunReportsUsingGETOK with default headers values
func NewGetMultipleRunReportsUsingGETOK() *GetMultipleRunReportsUsingGETOK {
	return &GetMultipleRunReportsUsingGETOK{}
}

/* GetMultipleRunReportsUsingGETOK describes a response with status code 200, with default header values.

Successfully received short information
*/
type GetMultipleRunReportsUsingGETOK struct {
	Payload []*models.SimplifiedFullRunReport
}

func (o *GetMultipleRunReportsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/multiple][%d] getMultipleRunReportsUsingGETOK  %+v", 200, o.Payload)
}
func (o *GetMultipleRunReportsUsingGETOK) GetPayload() []*models.SimplifiedFullRunReport {
	return o.Payload
}

func (o *GetMultipleRunReportsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMultipleRunReportsUsingGETUnauthorized creates a GetMultipleRunReportsUsingGETUnauthorized with default headers values
func NewGetMultipleRunReportsUsingGETUnauthorized() *GetMultipleRunReportsUsingGETUnauthorized {
	return &GetMultipleRunReportsUsingGETUnauthorized{}
}

/* GetMultipleRunReportsUsingGETUnauthorized describes a response with status code 401, with default header values.

OAuth header is not declared or is wrong
*/
type GetMultipleRunReportsUsingGETUnauthorized struct {
}

func (o *GetMultipleRunReportsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/multiple][%d] getMultipleRunReportsUsingGETUnauthorized ", 401)
}

func (o *GetMultipleRunReportsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetMultipleRunReportsUsingGETNotFound creates a GetMultipleRunReportsUsingGETNotFound with default headers values
func NewGetMultipleRunReportsUsingGETNotFound() *GetMultipleRunReportsUsingGETNotFound {
	return &GetMultipleRunReportsUsingGETNotFound{}
}

/* GetMultipleRunReportsUsingGETNotFound describes a response with status code 404, with default header values.

Contest or your participation is not found
*/
type GetMultipleRunReportsUsingGETNotFound struct {
}

func (o *GetMultipleRunReportsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /contests/{contestId}/submissions/multiple][%d] getMultipleRunReportsUsingGETNotFound ", 404)
}

func (o *GetMultipleRunReportsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
